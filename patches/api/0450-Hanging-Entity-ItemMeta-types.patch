From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Isaac - The456 <the456@the456gamer.dev>
Date: Tue, 19 Dec 2023 00:45:11 +0000
Subject: [PATCH] Hanging Entity ItemMeta types


diff --git a/src/main/java/io/papermc/paper/inventory/meta/HangingEntityMeta.java b/src/main/java/io/papermc/paper/inventory/meta/HangingEntityMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7977707e5fa02a912f2692b500a8c0642ea8dc7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/meta/HangingEntityMeta.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.inventory.meta;
+
+import io.papermc.paper.math.BlockPosition;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.jetbrains.annotations.Nullable;
+
+public interface HangingEntityMeta extends ItemMeta {
+
+    /**
+     * Sets the Spawn Location for this entity.
+     *
+     * This location must be within 16 blocks of where the player
+     * originally wanted to place the item to have any effect,
+     * instead placing in the original spot and
+     * printing a warning to console if outside this range.
+     *
+     * @param location A new location for the entity to spawn at, or null to spawn where placed.
+     */
+    void setSpawnLocation(@Nullable BlockPosition location);
+
+    /**
+     * Gets the Spawn Location for this entity.
+     *
+     * This location must be within 16 blocks of where the player
+     * originally wanted to place the item to have any effect,
+     * instead placing in the original spot and
+     * printing a warning to console if outside this range.
+     *
+     * @return The location for the entity to spawn at, or null if it will spawn where it is placed.
+     */
+    @Nullable
+    BlockPosition getSpawnLocation();
+
+}
diff --git a/src/main/java/io/papermc/paper/inventory/meta/ItemFrameMeta.java b/src/main/java/io/papermc/paper/inventory/meta/ItemFrameMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6db274b026787c20a93f30b4d4c4ed098961b77
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/meta/ItemFrameMeta.java
@@ -0,0 +1,120 @@
+package io.papermc.paper.inventory.meta;
+
+import org.bukkit.Rotation;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.Attachable;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The meta for {@link org.bukkit.entity.ItemFrame} and {{@link org.bukkit.entity.GlowItemFrame}} Items
+ */
+public interface ItemFrameMeta extends HangingEntityMeta, Attachable {
+
+    //todo: remove this
+    // Item nbt
+    // ItemRotation
+    // ItemDropChance
+    // Facing (3d)
+    // Invisible
+    // Fixed
+
+
+    /**
+     * Gets the Item that will be in the frame.
+     *
+     * @return the Item.
+     */
+    @NotNull
+    ItemStack getItem();
+
+    /**
+     * Sets the Item that will be in the frame.
+     *
+     * use ItemStack.empty() to remove the item.
+     *
+     * @param item the New item.
+     */
+    void setItem(@NotNull ItemStack item);
+
+
+    /**
+     * Gets how the item will be rotated in the placed frame.
+     *
+     * @return the rotation.
+     */
+    @NotNull
+    Rotation getItemRotation();
+
+    /**
+     * Sets how the item will be rotated in the placed frame.
+     *
+     * @param rotation the rotation to apply.
+     */
+    void setItemRotation(@NotNull Rotation rotation);
+
+    /**
+     * Gets the chance of the item being dropped when the placed frame is destroyed.
+     *
+     * <ul>
+     * <li>A drop chance of 0.0F will never drop
+     * <li>A drop chance of 1.0F will always drop
+     * </ul>
+     *
+     *
+     *
+     * @return the item's drop chance.
+     */
+    float getItemDropChance();
+
+    /**
+     * Sets the chance of the item being dropped when the placed frame is destroyed.
+     *
+     * <ul>
+     * <li>A drop chance of 0.0F will never drop
+     * <li>A drop chance of 1.0F will always drop
+     * </ul>
+     *
+     * @param chance the item's drop chance.
+     */
+    void setItemDropChance(float chance);
+
+    /**
+     * Returns whether the item frame will be "fixed" or not.
+     *
+     * When true it's not possible to destroy/move the frame (e.g. by damage,
+     * interaction, pistons, or missing supporting blocks), rotate the item or
+     * place/remove items.
+     *
+     * @return whether the frame will be fixed or not.
+     */
+    boolean isFixed();
+
+    /**
+     * Sets whether the item frame will be fixed or not.
+     *
+     * When set to true it's not possible to destroy/move the frame (e.g. by
+     * damage, interaction, pistons, or missing supporting blocks), rotate the
+     * item or place/remove items.
+     *
+     * @param fixed whether the item frame will be fixed or not
+     */
+    void setFixed(boolean fixed);
+
+    /**
+     * Returns whether the placed item frame will be visible or not.
+
+     *
+     * @return whether the placed item frame will be visible or not.
+     */
+    boolean isVisible();
+
+    /**
+     * Sets whether the placed item frame will be visible or not.
+     *
+     * @param visible whether the placed item frame will be visible or not.
+     */
+    void setVisible(boolean visible);
+
+
+
+}
diff --git a/src/main/java/io/papermc/paper/inventory/meta/PaintingMeta.java b/src/main/java/io/papermc/paper/inventory/meta/PaintingMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..9ae35f608b1f98e5f7e20b9b8cf2a3c6dd2f4d01
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/meta/PaintingMeta.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.inventory.meta;
+
+import org.bukkit.Art;
+import org.bukkit.material.Attachable;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * The meta for {@link org.bukkit.entity.Painting} Items
+ */
+public interface PaintingMeta extends HangingEntityMeta, Attachable {
+
+    //todo: remove this
+    // rotation
+    // variant
+    // any other non-additional entity data
+
+    /**
+     * Gets the placed painting's design
+     *
+     * @return Art Variant, null if random
+     */
+    @Nullable
+    Art getVariant();
+
+    /**
+     * Sets the placed painting's design
+     *
+     * @param art the design, null to reset to random
+     */
+    void setVariant(@Nullable Art art);
+
+}
